1 软件重用
软件重用技术是一种重要的软件开发方法，虽然至今软件重用技术还不够成熟，离理想中的软件工厂还有很长的路要走，但现有的一些重用技术（例如，中间件 、 应用服务器等）已经改变了开发过程。

1.1 软件重用形式
软件产品与其他的产品不同，是抽象的，一旦产生就可以无限制地复制，因此重复利用软件产品的意义重大，可以节约大量的人力物力。软件重用指的是利用已经存在的软件元素建立新的软件系统，这其中的软件元素既可以是软件产品 、 源程序，也可以是文档 、 设计思想甚至是领域知识。软件重用可以直接提高软件的开发效率 、 降低软件的开发成本 、 缩短软件的开发周期 、 提高软件质量。

常见的软件重用形式包括：

（1）源代码重用

这是最简单也是最常见的重用形式，但由于软件系统的复杂性，很难大规模地重用已有源代码。

（2）架构重用

架构重用也很常见，随着软件架构风格和设计模式的推广和应用，架构重用已经对软件开发产生了重大的影响。

（3）应用框架的重用

随着软件技术的发展，应用框架的重用变得越来越普遍，很多成熟的软件公司都建立了自己的开发框架。在开源社区中，世界各地的技术爱好者也在不断地推出应用了各种新技术的开发框架，例如，应用了 AOP （ Aspect Oriented Programming ，面向方面编程）技术的 Spring 等。

（4）业务建模的重用

虽然不同的软件的业务领域各自不同，但人们还是总结出了一些常见领域的建模方法，重用这些领域模型可以降低因领域知识不足而造成的需求风险。

（5）文档及过程的重用

软件文档和软件过程也是软件开发中不可或缺的元素，有效地重用这些文档和过程也有助于提高开发效率和软件质量 、 降低开发成本。

（6）软件服务的重用

随着 Web 服务的提出，人们越来越关注服务的重用 。SOA （ Service-Oriented Architecture ，面向服务的架构）提出了面向服务的软件架构，并定义了相应的标准。

1.2 构件技术
构件又称为组件，是一个自包容 、 可复用的程序集。首先，构件是一个程序集，或者说是一组程序的集合。这个集合可能会以各种方式体现出来，如源程序或二进制的代码。这个集合整体向外提供统一的访问接口，构件外部只能通过接口来访问构件，而不能直接操作构件的内部。

构件的两个最重要的特性是自包容与可重用。自包容指的是构件的本身是一个功能完整的独立体，构件内部与外部的功能界限清晰明确，可以独立配置与使用。而可重用既是构件的特点，也是构件出现的目的。早在 1968 年 NATO 软件工程会议， Mcllroy 的论文 《 大量生产的软件构件 》 中，就提出了 “ 软件组装生产线 ” 的思想。从那以后，使用构件技术实现软件复用，采用 “ 搭积木 ” 的方式生产软件，就成为软件人员的梦想。

构件的开发者和使用者往往不是相同的人或组织，所以必须定义构件的标准才能够消除其中的障碍。随着构件技术的发展，目前应用比较广泛的构件标准有 CORBA、JavaBean/EJB、COM/DCOM。

（1）CORBA

CORBA（Common ObjectRequest Broker Architecture 公共对象请求代理体系结构）是由OMG组织制订的一种标准的面向对象应用程序体系规范。

CORBA 有很广泛的应用，它易于集成各厂商的不同计算机，从大型机一直到微型内嵌式系统的终端桌面，是针对大中型企业应用的优秀的中间件。最重要的是，它使服务器真正能够实现高速度 、 高稳定性处理大量用户的访问。现在很多大型网站后端的服务器都运行 CORBA。

（2）JavaBean/EJB

JavaBean在一般情况下指的是实体类，在大部分情况下和POJO是同义词，基本构成就是一些字段和与之对应的 setter、getter方法，如果一个JavaBean需要在不同的JVM的进程中进行传递，还需要实现Serializable接口。

EJB = Enterprise Java Bean，现在已经很少使用了。

（3）COM/DCOM

COM(Component Object Model) 提供了一个 Windows 平台上的对象通讯技术，并且逐渐成为应用程序之间彼此通讯及互动的技术主流，那么 DCOM(Distributed COM) 则是解决了计算机的通信和互动技术。

COM 的着眼点是在于同一台计算机上不同应用程序之间的通讯需求，跨到另外一台计算机之外，就不是一开始 COM 所设想到的领域。所幸跨程序的通讯和跨计算机的通讯差异仅在于通讯协议的处理 ( 也就是定位问题 ) ，对于数据交换上的处理并不会因此而有区别。所以要让 COM 的环境能更进一步延伸到跨计算机的领域，只要妥善解决计算机定位的需求，就有机会克服。同样幸运的是， COM 在一开始的设计中完全不去碰触跨计算机的问题，使得要在 COM 的架构之上再架上一层跨计算机的处理环境并不会去破坏到原本的架构。于是 COM 的网络延伸版本 DCOM(Distributed COM) 就此出现，负责让 COM 组件可以在网络环境下持续提供服务。 DCOM 最主要处理的是两个议题，第一个议题是网络通讯能力，第二个议题则是权限的问题。之前 COM 是在同一台计算机中找特定的组件，而 DCOM 则要更进一步去找网络上的某台计算机，之后沿用 COM 的机制找到计算机上的组件。

COM+倡导一种新的设计概念，把COM组件提升到应用层，把底层细节留给操作系统，使COM+与操作系统的结合更加紧密。COM+的底层结构仍然以COM为基础，但在应用方式上则更多地继承了MTS（Microsoft Transaction Server）的处理机制，包括MTS的对象环境、安全模型、配置管理等。COM+把COM、DCOM和MTS三者有机地统一起来，同时也新增了一些服务，如负载平衡、内存数据库、事件模型、队列服务等，形成一个概念新、功能强的组件体系结构，使得COM+形成真正适合于企业应用的组件技术。